package io.tomahawkd.blockchain.application.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import io.tomahawkd.blockchain.application.user.TransactionHelper;
import io.tomahawkd.blockchain.application.utils.Asset;
import io.tomahawkd.blockchain.application.utils.ThreadManager;

import javax.swing.*;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import java.awt.*;
import java.util.List;

public class AllAssetPanel extends JPanel {
    private JTable assetsTable;
    private JPanel mainPanel;
    private JButton refreshButton;
    private TableSource source;

    public AllAssetPanel() {
        add(mainPanel);
        try {
            source = new TableSource();
            assetsTable.setModel(source);
        } catch (Exception exception) {
            exception.printStackTrace();
            new AlertDialog(exception).setVisible(true);
        }

        refreshButton.addActionListener(e -> update());
    }

    public void update() {
        ThreadManager.INSTANCE.addNewTask(() -> {
            try {
                source.update();
                assetsTable.updateUI();
            } catch (Exception exception) {
                exception.printStackTrace();
                new AlertDialog(exception).setVisible(true);
            }
        });
    }

    private static class TableSource implements TableModel {

        private List<Asset> list;
        private final String[] columnHeader = new String[]{"id", "owners", "current", "pending", "status"};

        public void update() throws Exception {
            this.list = TransactionHelper.INSTANCE.GetAllAssets();
        }

        public TableSource() throws Exception {
            update();
        }

        @Override
        public int getRowCount() {
            return list.size();
        }

        @Override
        public int getColumnCount() {
            return columnHeader.length;
        }

        @Override
        public String getColumnName(int i) {
            return columnHeader[i];
        }

        @Override
        public Class<?> getColumnClass(int i) {
            return String.class;
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

        @Override
        public Object getValueAt(int row, int column) {
            switch (column) {
                case 0:
                    return list.get(row).getUid();
                case 1:
                    return list.get(row).getOwnerMsps().stream().reduce("", (s, s2) -> s + ", " + s2);
                case 2:
                    return list.get(row).getCurrentOwnerMsp();
                case 3:
                    return list.get(row).getPendingOwnerMsp();
                case 4:
                    return list.get(row).getStatus().toString();
                default:
                    return null;
            }
        }

        @Override
        public void setValueAt(Object o, int i, int i1) {

        }

        @Override
        public void addTableModelListener(TableModelListener tableModelListener) {

        }

        @Override
        public void removeTableModelListener(TableModelListener tableModelListener) {

        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Assets List");
        mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        assetsTable = new JTable();
        scrollPane1.setViewportView(assetsTable);
        refreshButton = new JButton();
        refreshButton.setText("Refresh");
        mainPanel.add(refreshButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
